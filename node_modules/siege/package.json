{
  "author": {
    "name": "Gui Lin"
  },
  "name": "siege",
  "description": "http benchmark by nodejs",
  "version": "0.1.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/guileen/siege.js.git"
  },
  "main": "siege.js",
  "engines": {
    "node": "*"
  },
  "dependencies": {
    "commander": "*",
    "cookiejar": "*"
  },
  "devDependencies": {},
  "optionalDependencies": {},
  "readme": "siege.js\n========\n\nhttp benchmark\n\n    siege()\n      .on(3000)\n      .for(10000).times\n      .get('/')\n      .attack()\n\nsave as `benchmark.js` and run\n\n    node benchmark.js\n      \n## Use siege start/stop service\n\n`siege(cmd)` can start service before benchmark, stop service after benchmark, for agile development.\n\n    siege('node /path/to/app.js')\n      .on(3000)\n      .get('/')\n      .attack()\n      \nYou can also use `siege('/path/to/app.js')` to benchmark http handler of nodejs, `require('app.js')` must return a `function(req, res)`.\n\n    siege(__dirname + '/app.js')\n      .on(3000)\n      .get('/')\n      .attack()\n      \nCode above will start server listen at port 3000, benchmark module will connect to 3000. You can ignore `.on(3000)`, default is `.on('/tmp/siege.sock')`\n\nServer maybe need a little while to prepare, use `.wait(ms)` let benchmark wait a moment to do benchmark.\n\n    siege(__dirname + '/app.js')\n      .wait(1000)\n      .get('/')\n      .attack()\n      \n## Define task\n\nUse `method(url, params)` to define task, you can define multiple tasks, this will help you figure out which page is slow on your site.\n\n    siege()\n      .get('/')\n      .post('/hello', {hello: 'world'})\n      .attack()\n      \nTasks will execute as define order one by one.\n      \n## Repeat times and duration\n\nUse `.for(n).times` define repeate times, use `for(n).seconds` define duration, you can use on siege for all tasks, \nor use it on single task.\n\n    siege()\n      .for(10000).times\n      .get('/').for(2).seconds\n      .get('/about').for(3000).times\n      .get('/contact')\n      .attack()\n      \nCode above, `/` will do benchmark for 2 seconds, `/about` will do for 3000 times, `/contact` will do for 10000 times.\n\n## Concurrent\n\nUse `.concurrent(n)` to control concurrent request. default is 15\n\n    siege()\n      .concurrent(100)\n      .get('/')\n      .attack()\n\n## Cookie\n\nUse `.withCookie` to enable cookie jar, so you can do benchmark on the page require login.\n\n    siege()\n      .withCookie\n      .post('/login', {user: pass}).for(1).times\n      .get('/')\n      .attack()\n\n## Start siege attack\n\nUse `.attack()` to start siege attack.\n\n## Multiple app\n\nIn theory Siege can do benchmark on multiple app.\n\n    siege('app1.js')\n      .get('/')\n      .attack()\n      \n    siege('app2.js')\n      .get('/')\n      .attack()\n      \nBut under unknow reason, after first app done, seconde app will quit. You have two options, \n\n1. Don't use this feature\n2. send a pull request\n\n## More feature and report?\n\nSiege will add new feature base on requirement, we have `with304` options, but it is not implement.\n\nSiege also want more beautiful report.\n\nIt's welcome to send a pull request.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/guileen/siege.js/issues"
  },
  "_id": "siege@0.1.0",
  "dist": {
    "shasum": "270e9b4180197c87ba40f5c04a839700dce245fe",
    "tarball": "http://registry.npmjs.org/siege/-/siege-0.1.0.tgz"
  },
  "_from": "siege@*",
  "_npmVersion": "1.3.5",
  "_npmUser": {
    "name": "guileen",
    "email": "guileen@gmail.com"
  },
  "maintainers": [
    {
      "name": "guileen",
      "email": "guileen@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "270e9b4180197c87ba40f5c04a839700dce245fe",
  "_resolved": "https://registry.npmjs.org/siege/-/siege-0.1.0.tgz"
}
